apply plugin: 'com.android.application'
apply plugin: 'hugo'


android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

//    http://romannurik.github.io/AndroidAssetStudio/nine-patches.html
//    enforceUniquePackageName = true
    defaultConfig {
        applicationId "com.bitants.launcher"
        minSdkVersion 8
        targetSdkVersion 11
    }

    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java','libs']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }

    }

    lintOptions {
        abortOnError false
    }

    if (project.hasProperty("MyProject.properties")
            && new File(project.property("MyProject.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("MyProject.properties"))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }
    } else {
        signingConfigs {
            release {

            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources false
            proguardFiles 'proguard.cfg'
            signingConfig signingConfigs.release
            resValue "string", "my_string", "string value debug"
        }
        debug {
            minifyEnabled false
            shrinkResources false
            resValue "string", "my_string", "string value debug"
        }
    }

    dexOptions {
        jumboMode = true
        preDexLibraries = false
    }
}

dependencies {
    compile project(':core')
    //    provider 'com.android.support:support-v4:18.0.0'
    //    compile 'com.android.support:support-v4:19.0.+'
    //    compile 'com.android.support:appcompat-v7:19.0.+'
    //    compile files('libs/classes.jar')
    //    compile 'com.parse.bolts:bolts-android:1.+'
    //    compile fileTree(dir: 'libs', include: 'Parse-*.jar')
    //    compile fileTree(dir: 'libs', include: 'ParseCrashReporting-*.jar')
    compile('com.github.machinarius:preferencefragment:0.1.1') {
        exclude module: 'support-v4'
    }
    //    compile files('libs/supportv4jar.jar')
    //    compile files('libs/android-support-v7-appcompat.jar')
    //    compile files('libs/supportv4jar.jar')
    //    compile project(':libraries:ActionBarCompat:appcompat')
//    compile files('libs/supportv4jar.jar')
}

import java.util.regex.Pattern

task('increaseVersionCode') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('incrementVersionName') << {
    def manifestFile = file("src/main/AndroidManifest.xml")
    def patternVersionNumber = Pattern.compile("versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcherVersionNumber = patternVersionNumber.matcher(manifestText)
    matcherVersionNumber.find()
    def majorVersion = Integer.parseInt(matcherVersionNumber.group(1))
    def minorVersion = Integer.parseInt(matcherVersionNumber.group(2))
    def pointVersion = Integer.parseInt(matcherVersionNumber.group(3))
    def buildVersion = Integer.parseInt(matcherVersionNumber.group(4))
    if (buildVersion + 1 >= 1000) {
        buildVersion = 0
        pointVersion++
    } else {
        buildVersion++
    }
    if (pointVersion >= 100) {
        pointVersion = 0
        minorVersion++
    }
    if (minorVersion >= 100) {
        minorVersion = 0
        majorVersion++
    }
    def mNextVersionName = majorVersion + "." + minorVersion + "." + pointVersion + "." + buildVersion
    def manifestContent = matcherVersionNumber.replaceAll("versionName=\"" + mNextVersionName + "\"")
    manifestFile.write(manifestContent)
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig' || task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'incrementVersionName'
    }
}

//task myZip(type: Zip) {
//    from 'src/data'
//    archiveName = 'appcat.db.zip'
//    into('src/main/assets/databases')
//}
//
//tasks.whenTaskAdded { task ->
//    if (task.name == 'assemble') {
//        task.dependsOn myZip
//    }
//}
//
//println myZip.archiveName
//println myZip.destinationDir
//println myZip.archivePath
//println android.sourceSets.main.assets

//================================================================
// replace meta-data in AndroidManifest.xml
// the regex like this:
// <meta-data android:name="CHANNEL" android:value="*" />
//================================================================
android.applicationVariants.all { variant ->
    // rename out apk file
    renameApk(variant)

    // modify AndroidManifest.xml
    variant.processManifest.doLast {
        copy {
            from("${buildDir}/manifests") {
                include "${variant.dirName}/AndroidManifest.xml"
            }
            into("${buildDir}/manifests/$variant.name")

            def channelName = variant.productFlavors[0].name;
            println "[Channel]: ${channelName}"

            filter {
                String line ->
                    line.replaceAll("<meta-data android:name=\"CHANNEL\" android:value=\".*\"/>",
                            "<meta-data android:name=\"CHANNEL\" android:value=\"${channelName}\"/>")
            }

            // set the path to the modified Manifest:
            def manifestPath = "${buildDir}/manifests/${variant.name}/${variant.dirName}/AndroidManifest.xml"
            variant.processResources.manifestFile = file(manifestPath)
        }
    }
}

def renameApk(variant) {
    // get data for apk renaming
    def appName
    def versionName

    // local.properties def by user
    def propsFile = rootProject.file('local.properties')
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        appName = props['app_name']
        android.defaultConfig.versionName = props['app_version']
        versionName = android.defaultConfig.versionName
    } else {
        appName = "TestGradle"
        versionName = "1.0"
    }
//    println "[App_Name]: ${appName}"
//    println "[App_Version]: ${versionName}"

    def channelName = variant.productFlavors[0].name;

    if (variant.zipAlign) {
        def oldFile = variant.outputFile;
        def newFile = appName + "-v" + versionName + "-" + channelName + ".apk"
        variant.outputFile = new File(oldFile.parent, newFile)
    }

//    def oldFile = variant.packageApplication.outputFile;
//    def newFile = appName + "-v" + versionName +"-" + versionNameSuffix + "-unaligned.apk"
//    variant.packageApplication.outputFile = new File(oldFile.parent, newFile)
}
